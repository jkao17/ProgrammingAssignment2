available.packages(kernsmooth)
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
q()
swirl()
library(swirl)
swirl()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
play()
stdev
st
sd
nxt()
evaluate(sd,  c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x^2},6)
evaluate(function(x){x}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length()]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("ugh")
submit
submit()
mad_libs("UCLA","blue", "dorms")
submit()
submit()
%p%('I','love','R!')
submit()
%p%('I','love','R!')
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
as.list(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapplu(flag_shapes, range())
lapply(flag_shapes, range())
lapply(flag_shapes, range
)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
library(datasets)
data(iris)
?iris
sapply(iris, mean)
head(iris)
length(iris)
length(iris[Sepal.Length])
length(iris$Sepal.Length)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
unique(mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
sapply(split(mtcars$mpg, mtcars$cyl), mean)
debug(ls)
ls()
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
uniqu
q
q()
debug
debug
ls
lapply(mtcars, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
debug(end)
uniq
Q
q
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
ls()
q
sapply(split(mtcars$hp, mtcars$cyl), mean)
undebug(ls)
undebug(ls)
unique(mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl), mean)
dhp <-  sapply(split(mtcars$hp, mtcars$cyl), mean)
dhp[,3]
dhp[3]
dhp[2,3]
dhp[3]-dhp[1]
setwd("C:/Users/JKAO/GITproj/Coursera/ProgrammingAssignment2")
getwd
getwd()
ls
ls()
dir()
